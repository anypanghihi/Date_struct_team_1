#include <stdio.h>
#include <stdlib.h>
#define MAX 128
#define ROW 8
#define COL 17

typedef struct {
	int row;	// 세로 위치 (위, 아래)
	int col;	// 가로 위치 (좌, 우)
}location;

int maze_runner(char maze[][COL]);
location* new_location(int* w);
location* push(location* way[], int* w, int row, int col);
void pop(location* way[], int* w);
int iswhat(char maze[][COL], int row, int col);
int dir_check(char maze[][COL], location* a);
void footstep(char maze[][COL], location* a);
void backstep(char maze[][COL], location* a);
void finalstep(char maze[][COL], location* a);
void maze_print(char maze[][COL]);

void main()
{
	/*미로 그림 만들기 */
	char maze[][COL] =
	{
		"□□■□□□□□",
		"□■■□■■■■",
		"□■□□■□□□",
		"□■□■■□■■",
		"□□□□□□□□",
		"■■■□□■■■",
		"■■□□□■□□",
		"□□□■□□□□",
	};

	if (maze_runner(maze) == 0)
		puts("길이 없습니다...");

	maze_print(maze);
	printf("\n출구를 찾았습니다.\n");
}
int maze_runner(char maze[][COL])
{
	/* 지나간 길 저장할 스택(배열)과 저장갯수 */
	static location* way[MAX] = { NULL };
	static int w = 0;

	/* 북쪽부터 시계방향으로 돌림 (최대한 빨리 못찾게..) */
	/* 현재 위치 저장 변수 */
	location* a;
	a = push(way, &w, 0, 0);  // 출발지 생성
	int d = 0;  // 방향확인 후 return 받을 변수

	while (1)
	{
		/* 메모리 할당에 실패했을 경우 */
		if (a == NULL)
		{
			puts("미로 ERROR");
			return 0;
		}

		/* 출구에 도달하면 정상 종료 */
		else if (a->row == 7 && a->col == 14)
		{
			finalstep(maze, a);
			return 1;
		}

		/* 동서남북에 길이 있는지 검사 */
		else if ((d = dir_check(maze, a)) < 4)
		{
			int row = a->row, col = a->col;
			footstep(maze, a);
			if (d == 0)			// 북
				row -= 1;
			else if (d == 1)	// 동
				col += 2;
			else if (d == 2)	// 남
				row += 1;
			else if (d == 3)	// 서
				col -= 2;
			if ((a = push(way, &w, row, col)) == NULL)  // 신규 좌표 생성
				return 0;
		}

		/* 갈 길이 더 이상 없을 경우 */
		else
		{
			backstep(maze, a);
			pop(way, &w);
			a = way[w - 1];
			// w는 항상 새로 쓸 위치에 가 있기 때문에 마지막 위치는 w-1
		}
		maze_print(maze);
	}
	return 1;
}
location* push(location* way[], int* w, int row, int col)
{
	if ((way[*w] = new_location(w)) == NULL)
		return NULL;
	way[*w]->row = row;
	way[(*w)++]->col = col;

	return way[(*w) - 1];
}


/* 위치 저장 공간 생성 */
/* parameter : void */
/* return : 정상 == 신규 공간 주소, 비정상 == NULL */
location* new_location(int* w)
{
	/* max에 도달한 경우 NULL값 반환 */
	if (*w == MAX)
	{
		puts("길을 찾지 못했습니다.");
		return NULL;
	}
	location* temp;
	if ((temp = (location*)malloc(sizeof(location))) == NULL)
	{
		puts("메모리가 부족합니다.");
		exit(1);
	}
	/* 초기화 */
	temp->row = 0;
	temp->col = 0;

	return temp;
}

void pop(location* way[], int* w)
{
	/* 신규 시작점까지 없어진 상황이라면 */
	if (*w == 0)
	{
		puts("길이 이상합니다..");
		exit(1);
	}
	/* w는 항상 새로 쓸 위치에 자리하고 있기 때문에, 마지막 값은 w - 1 */
	free(way[*w - 1]);
	way[(*w)-- - 1] = NULL;
}
int iswhat(char maze[][COL], int row, int col)
{
	if (maze[row][col] == -95 &&
		maze[row][col + 1] == -32)
		return 1;
	return 0;
}

int dir_check(char maze[][COL], location* a)
{
	/* [북쪽확인] 위에 행이 있고 갈 수 있는 길일 때 '□' */
	if (a->row > 0 && iswhat(maze, a->row - 1, a->col) == 1)
		return 0;

	/* [동쪽확인] 오른쪽에 열이 있고 갈 수 있는 길일 때 */
	/* 2byte 문자구성이라, 좌우 이동은 2칸씩 이동해야함 */
	else if (a->col + 2 < COL && iswhat(maze, a->row, a->col + 2) == 1)
		return 1;

	/* [남쪽확인] 아랫쪽에 행이 있고 갈 수 있는 길일 때 */
	else if (a->row + 1 < ROW && iswhat(maze, a->row + 1, a->col) == 1)
		return 2;

	/* [서쪽확인] 아랫쪽에 행이 있고 갈 수 있는 길일 때 */
	else if (a->col > 0 && iswhat(maze, a->row, a->col - 1) == 1)
		return 3;
	/* 그 외 */
	return 4;
}
void footstep(char maze[][COL], location* a)
{
	maze[a->row][a->col] = -94;
	maze[a->row][a->col + 1] = -63;
}


/* 돌아간 자리 표시 넣어주기 (▣) */
/* parameter : 미로배열, 현재 위치 좌표 */
/* return : void */
void backstep(char maze[][COL], location* a)
{
	maze[a->row][a->col] = -94;
	maze[a->row][a->col + 1] = -61;
}


/* 출구 자리 표시 넣어주기 (↘) */
/* parameter : 미로배열, 현재 위치 좌표 */
/* return : void */
void finalstep(char maze[][COL], location* a)
{
	maze[a->row][a->col] = -94;
	maze[a->row][a->col + 1] = -39;
}

void maze_print(char maze[][COL])
{
	printf("\n\n");
	for (int i = 0; i < ROW; ++i)
		printf("\t%s\n", &maze[i][0]);
}
